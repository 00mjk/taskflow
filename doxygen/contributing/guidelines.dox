namespace tf {

/** @page guidelines Guidelines

This pages outlines the process that you will need to follow
to get a patch merged. 

@section HowCanIContribute How Can I Contribute?

There are multiple ways in which you can contribute to %Taskflow:

@li Use it! Let us know what you think and how it helps your jobs!
@li Catch a typo in documentation or want to make it better to understand? Edit the [doc source](https://github.com/taskflow/taskflow/tree/master/doxygen)!
@li Ask questions, request new features, and catch bugs? Report it at [issue tracker](https://github.com/taskflow/taskflow/issues)!
@li Know how to fix an issue, bug, or add new features? Make a [pull request](https://github.com/taskflow/taskflow/pulls)!
@li Share %Taskflow with others. The more people use it, the more solid %Taskflow becomes!

Your contributions are always welcome.
Every contribution regardless of its size is significant to keep %Taskflow thrive.

@section HowCanIGetCredited How Can I Get Credited?

Your contribution is an undeniably important piece of the %Taskflow project, 
and we want to make sure you always get credit for your work.
Depending on the technical innovation and engineering effort, 
we credit your contributions as follows:

@li We document your commit or pull request at the @ref contributors page
@li We advertise your organization as either users or sponsors at the [project website](https://taskflow.github.io/#tag_users)
@li We highlight your names in our technical presentations (e.g., [CppCon](https://www.youtube.com/user/CppCon)) from time to time
@li We co-author you in our research publications if you introduce significant innovation (see @ref References) 

Your effort really matters to us and we are eater to acknowledge your contributions!
As such, we would welcome any advice and recommendations 
that can improve our credit system.
Please [let us know](https://taskflow.github.io/#tag_contact).

@section HowCanIGetStarted How Can I Get Started?

There are no better ways other than trying out %Taskflow before you want to contribute.
We summarize a few steps below for you to follow.

@subsection Step1LookAround Step 1: Look around

Visit the [official website](https://taskflow.github.io/) and get an 1000-feet overview
of %Taskflow, in which you shall find recent news, releases, use cases, 
and other useful information of %Taskflow.
We also provided a [showcase presentation](https://taskflow.github.io/showcase/index.html#/) for you to quickly understand the technical work of %Taskflow.
Then, check out our @ref usecases and get a sense about
the problems %Taskflow is good at.

@subsection Step2WriteATaskflowProgram Step 2: Write a Taskflow program

%Taskflow is a programming system. We believe it is impossible to understand
what %Taskflow is doing without writing real code. 
Visit @ref QuickStart and program your first hello-world with %Taskflow!

@code{.cpp}
#include <taskflow/taskflow.hpp>  // Taskflow is header-only

int main(){
  
  tf::Executor executor;
  tf::Taskflow taskflow;

  auto [A, B, C, D] = taskflow.emplace(
    [] () { std::cout << "TaskA\n"; },   //  task dependency graph
    [] () { std::cout << "TaskB\n"; },   // 
    [] () { std::cout << "TaskC\n"; },   //          +---+          
    [] () { std::cout << "TaskD\n"; }    //    +---->| B |-----+   
  );                                     //    |     +---+     |
                                         //  +---+           +-v-+ 
  A.precede(B);  // A runs before B      //  | A |           | D | 
  A.precede(C);  // A runs before C      //  +---+           +-^-+ 
  B.precede(D);  // B runs before D      //    |     +---+     |    
  C.precede(D);  // C runs before D      //    +---->| C |-----+    
                                         //          +---+          
  executor.run(taskflow).wait();

  return 0;
}
@endcode

The hello-world program creates four tasks, @c A, @c B, @c C, and @c D,
where @c A runs before @c B and @c C, and @c D runs after @c B and @c C.
When @c A finishes, @c B and @c C can run in parallel, and then @c D.


@subsection Step3WriteATaskflowProgram Step 3: Dive in

After you successfully finish the hello-world example, 
give a deep dive-in to the technical details
by visiting @ref Cookbook, @ref Algorithms, and @ref Examples.
These pages provides you step-by-step tutorials about the
fundamental syntaxes and tasking models in %Taskflow 
that you need to fully take advantage
of task graph parallelism to boost your application performance.

At this stage, you may encounter issues, features requests, 
and questions.
Then, start your first contribution by posting them in our 
[issue tracker](https://github.com/taskflow/taskflow/issues)!


@section HowCanIReportAnIssue How Can I Report Issues?

%Taskflow is in active development. 
We are not surprised that you encounter something that needs improvement
or fixes to work for your use cases.
Or you want to suggest something that can improve %Taskflow's functionality.
Please do not hesitate to share any of these issues with by
by opening an post at our
[issue tracker](https://github.com/taskflow/taskflow/issues)!

Please make sure that you provide all the necessary information 
in the issue body to communicate your problem clearly so we can work on it efficiently.

@section HowCanIEditTheDocumentation How Can I Edit the Documentation?

Documentation is just as important as the codebase!
There is always a scope of improvement in documentation to 
add some missing information or to make it easier to read. 
We use the famous [Doxygen](https://www.doxygen.nl/index.html) to compile 
our documentation.
You can edit the [documentation source](https://github.com/taskflow/taskflow/tree/master/doxygen) which is stored as a text file in the @c doxygen directory of %Taskflow.
After editing the file locally, you can submit your changes to us by making a patch.

@section HowCanISubmitAPatch How Can I Submit a Patch?

@section HowCanILeadAProject How Can I Lead a Project?


*/

}




