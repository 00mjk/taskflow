namespace tf {

/** @page install Building and Installing

This page describes how to set up %Taskflow in your project. 
We will also go through the building process of unit tests and examples.

[TOC]

@section BAISupportedCompilers Supported Compilers

To use %Taskflow, you only need a compiler that supports C++17:

@li GNU C++ Compiler at least v7.0 with -std=c++17
@li Clang C++ Compiler at least v6.0 with -std=c++17
@li Microsoft Visual Studio at least v15.7 (MSVC++ 19.14)
@li AppleClang Xode Version at least v12.0 with -std=c++17
@li Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17

%Taskflow works on Linux, Windows, and Mac OS X.

@section BAIIntegrateTaskflowToYourProject Integrate Taskflow to Your Project

%Taskflow is *header-only* and there is no need for installation.
Simply download the source and copy the headers under the directory @c taskflow/
to your project.

@code{.shell-session}
~$ git clone https://github.com/taskflow/taskflow.git
~$ cd taskflow/
~$ cp -r taskflow myproject/include/
@endcode

%Taskflow is written in C++17 and is built on top of 
C++ standardized threading libraries to improve portability.
To compile a %Taskflow program, say <tt>simple.cpp</tt>, you need to tell the compiler
where to find the %Taskflow header files and link it through the system thread library
(usually [POSIX threads](http://man7.org/linux/man-pages/man7/pthreads.7.html) in Linux-like systems).
Take gcc for an example:

@code{.shell-session}
~$ g++ simple.cpp -std=c++17 -I myproject/include/ -O2 -pthread -o simple
@endcode


@section BAIBuildExamplesAndUnitTests Build Examples and Unit Tests

%Taskflow uses CMake to build examples and unit tests. 
We recommend using out-of-source build.

@code{.shell-session}
~$ cd path/to/taskflow
~$ mkdir build
~$ cd build
~$ cmake ../
~$ make                         # compile all examples and unittests
~$ make test

Running tests...
/usr/bin/ctest --force-new-ctest-process
Test project /home/tsung-wei/Code/taskflow/build
        Start   1: passive_vector
  1/254 Test   #1: passive_vector ...................   Passed    0.04 sec
        Start   2: function_traits
  2/254 Test   #2: function_traits ..................   Passed    0.00 sec
        Start   3: object_pool.sequential
  3/254 Test   #3: object_pool.sequential ...........   Passed    0.10 sec
...

100% tests passed, 0 tests failed out of 254

Total Test time (real) =  29.67 sec
@endcode

When the building completes, you can find the executables for examples and tests
under the two folders, @c examples/ and @c unittests/.


@section BAIConfigureCMakeOptions Configure CMake Options

You can list a set of available options in the cmake.

@code{.shell-session}
~$ cmake -LA
...
TF_BUILD_EXAMPLES:BOOL=ON       # by default, we compile examples
TF_BUILD_TESTS:BOOL=ON          # by default, we compile tests
TF_BUILD_BENCHMARKS:BOOL=OFF    # by default, we don't compile benchmarks 
TF_BUILD_CUDA:BOOL=OFF          # by default, we don't compile CUDA code
...
... more options
@endcode

Currently, our CMake script supports the following options:

<div align="center">
| CMake Option        | Default   | Usage   |
| :-:                 | :-:       | :-:     |
| TF_BUILD_EXAMPLES   | ON        | enable/disable building examples   |
| TF_BUILD_TESTS      | ON        | enable/disable building unit tests |
| TF_BUILD_BENCHMARKS | OFF       | enable/disable building benchmarks |
| TF_BUILD_CUDA       | OFF       | enable/disable building CUDA code  |
| TF_BUILD_SYCL       | OFF       | enable/disable building SYCL code  |
</div>

To enable or disable a specific option, use @c -D in the CMake build. 
For example:

@code{.shell-session}
~$ cmake ../ -DTF_BUILD_EXAMPLES=OFF
@endcode

The above command turns off building %Taskflow examples.

@section BAIBuildCUDACode Build CUDA Code

To build CUDA code, including unit tests and examples, 
define the CMake option @c TF_BUILD_CUDA to @c ON as follows:

@code{.shell-session}
~$ cmake ../ -DTF_BUILD_CUDA=ON
~$ make
@endcode

To compile a %Taskflow program with CUDA (e.g., tf::cudaFlow), 
use @nvcc with C++17 enabled as follows:

@code{.shell-session}
~$ nvcc my_taskflow_cuda_program.cu -std=c++17 -o my_taskflow_cuda_program
@endcode

%Taskflow's tasking interface for CUDA GPU programming 
is built on top of @cudaGraph, which allows work to be efficiently defined as 
graphs rather than single operations. 

@section BAIBuildSYCLCode Build SYCL Code

TBD

*/

}








