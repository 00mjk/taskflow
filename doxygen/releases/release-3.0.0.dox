namespace tf {

/** @page release-3-0-0 Release 3.0.0 (Master)

%Taskflow 3.0.0 is the newest developing line to new features and improvements 
we continue to support.
It is also where this documentation is generated.
Many things are considered @em experimental and may change or break from time to time.
While it may be difficult to be keep all things consistent when introducing new features, 
we continue to try our best to ensure backward compatibility.

Starting from v3, we have migrated the codebase to the @CPP17 standard
to largely improve the expressivity and efficiency of the codebase.

@tableofcontents

@section release-3-0-0_download Download

To download the newest version of %Taskflow, please clone from <a href="https://github.com/taskflow/taskflow">%Taskflow's GitHub</a>.

@section release-3-0-0_system_requirements System Requirements

To use %Taskflow v3.0.0, you need a compiler that supports C++17:

@li GNU C++ Compiler at least v7.0 with -std=c++17
@li Clang C++ Compiler at least v6.0 with -std=c++17
@li Microsoft Visual Studio at least v19.27 with /std:c++17
@li AppleClang Xode Version at least v12.0 with -std=c++17
@li Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17

%Taskflow works on Linux, Windows, and Mac OS X.

@section release-3-0-0_working_items Working Items

@li enhancing the taskflow profiler (<a href="https://github.com/taskflow/tfprof">TFProf</a>)
@li adding parallel sort tf::Taskflow::sort algorithms
@li adding methods for updating tf::cudaFlow (with unittests)
@li adding support for @cuBLAS
@li adding support for @cuDNN
@li adding support for SYCL (ComputeCpp and DPC++)

@section release-3-0-0_new_features New Features

@li replaced all non-standard libraries with C++17 STL (e.g., @std_optional, @std_variant)
@li added utility functions to grab the cuda device properties (see cuda_device.hpp)
@li added utility functions to control cuda memory (see cuda_memory.hpp)
@li added per-thread pool for CUDA streams to improve performance
@li added a new interface tf::cudaFlowCapturer for building a GPU task graph through stream capture
@li added a new interface tf::cudaFlowCapturerBase to support custom-defined capturers (see @ref C7_CreateCustomCapturer)
@li added a new interface tf::cudaFlow::capture for capturing a CUDA task graph within a parent %cudaFlow
@li added a new method tf::Taskflow::emplace_on to place a %cudaFlow (tf::cudaFlow and tf::cudaFlowCapturer) on the given device context
  + removed tf::cudaFlow::device
@li added tf::cudaFlow::dump and tf::cudaFlowCapturerBase::dump to visualize %cudaFlow
  + supported recursive dump of a %cudaFlow with child graphs
@li added standalone %cudaFlow without going through tf::Taskflow 
    (see @ref C6_UsecudaFlowInAStandaloneEnvironment)
@li added tf::cudaFlow::offload and update methods to run a %cudaFlow from the task callable and update task parameters (see @ref C6_OffloadAndUpdateAcudaFlow)
@li added a new library tf::cublasFlowCapturer to support BLAS on top of @cuBLAS (see @ref LinearAlgebracublasFlowCapturer)
@li added a custom graph interface to support dynamic polymorphism for tf::cudaGraph
@li added support for compiling %Taskflow and CUDA source code separately (see @ref CompileTaskflowWithCUDA)
@li added tf::WorkerView for users to observer the worker that runs the task
@li modified tf::ObserverInterface::on_entry and tf::ObserverInterface::on_exit to take tf::WorkerView instead of uninformative @c size_t

@section release-3-0-0_documentation Documentation

@li added @ref CompileTaskflowWithCUDA
@li added @ref chapter7
@li added @ref GPUAlgorithms
  + @ref SingleTaskCUDA to run a kernel function in just a single thread
  + @ref ForEachCUDA to perform parallel iterations over a range
  + @ref ParallelTransformsCUDA to perform parallel transforms over a range
  + @ref LinearAlgebracublasFlowCapturer to build GPU-accelerated 
         linear algebra applications
@li added @ref Governance
  + @ref rules
  + @ref team
  + @ref codeofconduct
@li added @ref Contributing
  + @ref guidelines
  + @ref contributors
@li improved documentation pages for files

@section release-3-0-0_bug_fixes Bug Fixes 

@li fixed the bug in stream capturing (need to use @c ThreadLocal mode)
@li fixed the bug in reporting wrong worker ids when compiling 
    a shared library due to the use of @c thread_local (now with C++17 
    @c inline variable)

@section release-3-0-0_deprecated_items Deprecated and Removed Items 

@li removed tf::cudaFlow::device; users may call tf::Taskflow::emplace_on to associate a cudaflow with a GPU device
@li removed tf::cudaFlow::join, use tf::cudaFlow::offload instead
@li removed the legacy tf::Framework
@li removed external mutable use of tf::TaskView
  + tf::TaskView::TaskView() 
  + tf::TaskView::TaskView(const tf::TaskView&)
  + tf::TaskView::TaskView(tf::TaskView&&)
  + tf::TaskView::operator ==
  + tf::TaskView::operator !=
  + tf::TaskView::operator =
  + tf::TaskView::reset

@section release-3-0-0_miscellaneous_items Miscellaneous Items

We have presented %Taskflow in the following C++ venues with recorded videos:
  + @CppCon20Talk
  + @MUCpp20Talk

We have published %Taskflow in the following conferences and journals:
  + Tsung-Wei Huang, &quot;[A General-purpose Parallel and Heterogeneous Task Programming System for VLSI CAD](iccad20.pdf),&quot; <i>IEEE/ACM International Conference on Computer-aided Design (ICCAD)</i>, CA, 2020
  + Chun-Xun Lin, Tsung-Wei Huang, and Martin Wong, &quot;[An Efficient Work-Stealing Scheduler for Task Dependency Graph](icpads20.pdf),&quot; <i>IEEE International Conference on Parallel and Distributed Systems (ICPADS)</i>, Hong Kong, 2020
  + Tsung-Wei Huang, Dian-Lun Lin, Yibo Lin, and Chun-Xun Lin, &quot;Cpp-Taskflow: A General-purpose Parallel %Task Programming System at Scale,&quot;	<em>IEEE Transactions on Computer-aided Design of Integrated Circuits and Systems (TCAD)</em>, to appear, 2020

*/

}
