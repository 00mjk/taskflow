namespace tf {

/** @page ParallelSort Parallel Sort

%Taskflow provides template function that constructs a task to sort a range of items in parallel.

@tableofcontents

@section ParallelSortMethod Parallel Sort 

The task created by tf::Taskflow::sort(B&& first, E&& last, C&& cmp) 
performs parallel sort to rank a range of elements specified by 
<tt>[first, last)</tt> using the given comparator @c cmp.
The given iterators must be @em random-accessible.
The following example creates a task to sort an integer data vector in parallel.

@code{.cpp}
tf::Taskflow taskflow;
tf::Executor executor;

std::vector<int> data = {1, 4, 9, 2, 3, 11, -8};

tf::Task sort = taskflow.sort(
  data.begin(), data.end(), [] (int l, int r) { return l < r; }
);
executor.run(taskflow).wait();

assert(std::is_sorted(data.begin(), data.end()));
@endcode

The iterators taken by tf::Taskflow::sort are templated,
where you can use std::reference_wrapper to pass stateful data between the sort
task and others.
The following example creates a task @c init to initialize the data vector
and a task @c sort to sort the data in parallel after @c init finishes.

@code{.cpp}
tf::Taskflow taskflow;
tf::Executor executor;

std::vector<int> data;
std::vector<int>::iterator first, last;

tf::Task init = taskflow.emplace([&](){ 
  data  = {1, 4, 9, 2, 3, 11, -8}; 
  first = data.begin();
  last  = data.end();
});
tf::Task sort = taskflow.sort(
  std::ref(first), std::ref(last), [] (int l, int r) { return l < r; }
);
init.precede(sort);

executor.run(taskflow).wait();

assert(std::is_sorted(data.begin(), data.end()));
@endcode

@note
tf::Taskflow::sort is not stable. That is, two or more objects with equal keys
may not appear in the same order before sorting.

*/

}


