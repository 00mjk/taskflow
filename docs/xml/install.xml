<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="install" kind="page">
    <compoundname>install</compoundname>
    <title>Building and Installing</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This page describes how to set up Taskflow in your project. We will also go through the building process of unit tests and examples.</para><sect1 id="install_1BAISupportedCompilers">
<title>Supported Compilers</title>
<para>To use Taskflow, you only need a compiler that supports C++17:</para><para><itemizedlist>
<listitem><para>GNU C++ Compiler at least v7.0 with -std=c++17 </para></listitem>
<listitem><para>Clang C++ Compiler at least v6.0 with -std=c++17 </para></listitem>
<listitem><para>Microsoft Visual Studio at least v15.7 (MSVC++ 19.14) </para></listitem>
<listitem><para>AppleClang Xode Version at least v8 </para></listitem>
<listitem><para>Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.0 with -std=c++17</para></listitem>
</itemizedlist>
Taskflow works on Linux, Windows, and Mac OS X.</para></sect1>
<sect1 id="install_1BAIIntegrateTaskflowToYourProject">
<title>Integrate Taskflow to Your Project</title>
<para>Taskflow is <emphasis>header-only</emphasis> and there is no need for installation. Simply download the source and copy the headers under the directory <computeroutput>taskflow/</computeroutput> to your project.</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>git<sp/>clone<sp/>https://github.com/taskflow/taskflow.git</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>cd<sp/>taskflow/</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>cp<sp/>-r<sp/>taskflow<sp/>myproject/include/</highlight></codeline>
</programlisting></para><para>Taskflow is written in C++17 and is built on top of C++ standardized threading libraries to improve portability. To compile a Taskflow program, say <computeroutput>simple.cpp</computeroutput>, you need to tell the compiler where to find the Taskflow header files and link it through the system thread library (usually <ulink url="http://man7.org/linux/man-pages/man7/pthreads.7.html">POSIX threads</ulink> in Linux-like systems). Take gcc for an example:</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>g++<sp/>simple.cpp<sp/>-std=c++17<sp/>-I<sp/>myproject/include/<sp/>-O2<sp/>-pthread<sp/>-o<sp/>simple</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="install_1BAIBuildExamplesAndUnitTests">
<title>Build Examples and Unit Tests</title>
<para>Taskflow uses CMake to build examples and unit tests. We recommend using out-of-source build.</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>cd<sp/>path/to/taskflow</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>mkdir<sp/>build</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>cmake<sp/>../</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>make<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>compile<sp/>all<sp/>examples<sp/>and<sp/>unittests</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>make<sp/>test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Running<sp/>tests...</highlight></codeline>
<codeline><highlight class="normal">/usr/bin/ctest<sp/>--force-new-ctest-process</highlight></codeline>
<codeline><highlight class="normal">Test<sp/>project<sp/>/home/tsung-wei/Code/taskflow/build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/><sp/><sp/>1:<sp/>passive_vector</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1/254<sp/>Test<sp/><sp/><sp/>#1:<sp/>passive_vector<sp/>...................<sp/><sp/><sp/>Passed<sp/><sp/><sp/><sp/>0.04<sp/>sec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/><sp/><sp/>2:<sp/>function_traits</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>2/254<sp/>Test<sp/><sp/><sp/>#2:<sp/>function_traits<sp/>..................<sp/><sp/><sp/>Passed<sp/><sp/><sp/><sp/>0.00<sp/>sec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/><sp/><sp/>3:<sp/>object_pool.sequential</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>3/254<sp/>Test<sp/><sp/><sp/>#3:<sp/>object_pool.sequential<sp/>...........<sp/><sp/><sp/>Passed<sp/><sp/><sp/><sp/>0.10<sp/>sec</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">100%<sp/>tests<sp/>passed,<sp/>0<sp/>tests<sp/>failed<sp/>out<sp/>of<sp/>254</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Total<sp/>Test<sp/>time<sp/>(real)<sp/>=<sp/><sp/>29.67<sp/>sec</highlight></codeline>
</programlisting></para><para>When the building completes, you can find the executables for examples and tests under the two folders, <computeroutput>examples/</computeroutput> and <computeroutput>unittests/</computeroutput>.</para></sect1>
<sect1 id="install_1BAIConfigureCMakeOptions">
<title>Configure CMake Options</title>
<para>You can list a set of available options in the cmake.</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>cmake<sp/>-LA</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">TF_BUILD_EXAMPLES:BOOL=ON<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>by<sp/>default,<sp/>we<sp/>compile<sp/>examples</highlight></codeline>
<codeline><highlight class="normal">TF_BUILD_TESTS:BOOL=ON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>by<sp/>default,<sp/>we<sp/>compile<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">TF_BUILD_BENCHMARKS:BOOL=OFF<sp/><sp/><sp/><sp/>#<sp/>by<sp/>default,<sp/>we<sp/>don&apos;t<sp/>compile<sp/>benchmarks<sp/></highlight></codeline>
<codeline><highlight class="normal">TF_BUILD_CUDA:BOOL=OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>by<sp/>default,<sp/>we<sp/>don&apos;t<sp/>compile<sp/>CUDA<sp/>code</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">...<sp/>more<sp/>options</highlight></codeline>
</programlisting></para><para>Currently, our CMake script supports the following options:</para><para> <table rows="6" cols="3"><row>
<entry thead="yes"><para>CMake Option  </para></entry><entry thead="yes"><para>Default  </para></entry><entry thead="yes"><para>Usage   </para></entry></row>
<row>
<entry thead="no"><para>TF_BUILD_EXAMPLES  </para></entry><entry thead="no"><para>ON  </para></entry><entry thead="no"><para>enable/disable building examples   </para></entry></row>
<row>
<entry thead="no"><para>TF_BUILD_TESTS  </para></entry><entry thead="no"><para>ON  </para></entry><entry thead="no"><para>enable/disable building unit tests   </para></entry></row>
<row>
<entry thead="no"><para>TF_BUILD_BENCHMARKS  </para></entry><entry thead="no"><para>OFF  </para></entry><entry thead="no"><para>enable/disable building benchmarks   </para></entry></row>
<row>
<entry thead="no"><para>TF_BUILD_CUDA  </para></entry><entry thead="no"><para>OFF  </para></entry><entry thead="no"><para>enable/disable building CUDA code   </para></entry></row>
<row>
<entry thead="no"><para>TF_BUILD_SYCL  </para></entry><entry thead="no"><para>OFF  </para></entry><entry thead="no"><para>enable/disable building SYCL code   </para></entry></row>
</table>
</para><para>To enable or disable a specific option, use <computeroutput>-D</computeroutput> in the CMake build. For example:</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>cmake<sp/>../<sp/>-DTF_BUILD_EXAMPLES=OFF</highlight></codeline>
</programlisting></para><para>The above command turns off building Taskflow examples.</para></sect1>
<sect1 id="install_1BAIBuildCUDACode">
<title>Build CUDA Code</title>
<para>To build CUDA code, including unit tests and examples, define the CMake option <computeroutput>TF_BUILD_CUDA</computeroutput> to <computeroutput>ON</computeroutput> as follows:</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>cmake<sp/>../<sp/>-DTF_BUILD_CUDA=ON</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>make</highlight></codeline>
</programlisting></para><para>To compile a Taskflow program with CUDA (e.g., <ref refid="classtf_1_1cudaFlow" kindref="compound">tf::cudaFlow</ref>), use <ulink url="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html">nvcc</ulink> with C++17 enabled as follows:</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>nvcc<sp/>my_taskflow_cuda_program.cu<sp/>-std=c++17<sp/>-o<sp/>my_taskflow_cuda_program</highlight></codeline>
</programlisting></para><para>Taskflow&apos;s tasking interface for CUDA GPU programming is built on top of <ulink url="https://developer.nvidia.com/blog/cuda-graphs/">CUDA Graph</ulink>, which allows work to be efficiently defined as graphs rather than single operations.</para></sect1>
<sect1 id="install_1BAIBuildSYCLCode">
<title>Build SYCL Code</title>
<para>TBD </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
