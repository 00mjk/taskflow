<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1TaskView" kind="class" language="C++" prot="public">
    <compoundname>tf::TaskView</compoundname>
    <includes refid="task_8hpp" local="no">task.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1TaskView_1a763b2f90bc53f92d680a635fe28e858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Executor</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="465" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="465" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1TaskView_1a48a830129a096755e9723ed67eea5455" prot="private" static="no" mutable="no">
        <type>Node *</type>
        <definition>Node* tf::TaskView::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="565" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="565" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1TaskView_1ada6755eb9db8badbf290eb25532a8d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::TaskView::TaskView</definition>
        <argsstring>()=default</argsstring>
        <name>TaskView</name>
        <briefdescription>
<para>constructs an empty task view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1adcc3095bec2afe51fffb0d2314c0e836" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::TaskView::TaskView</definition>
        <argsstring>(const Task &amp;task)</argsstring>
        <name>TaskView</name>
        <param>
          <type>const <ref refid="classtf_1_1Task" kindref="compound">Task</ref> &amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>constructs a task view from a task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="477" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="577" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a7c7b4378a67f39ee33724a4f96bc6abd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::TaskView::TaskView</definition>
        <argsstring>(const TaskView &amp;other)</argsstring>
        <name>TaskView</name>
        <param>
          <type>const <ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>constructs the task with the copy of the other task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="482" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="573" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a6228f57867fcaeec9fd47e58be2773fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
        <definition>TaskView &amp; tf::TaskView::operator=</definition>
        <argsstring>(const TaskView &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>replaces the contents with a copy of the other task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="487" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a4b8af1becc79b92d0f97b8397dc4c05b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
        <definition>TaskView &amp; tf::TaskView::operator=</definition>
        <argsstring>(const Task &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1Task" kindref="compound">Task</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>replaces the contents with another task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="492" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a148557f80bb73e600c00a4fde25ff5f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
        <definition>TaskView &amp; tf::TaskView::operator=</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="cpp/types/nullptr_t" kindref="compound" external="/Users/twhuang/PhD/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::nullptr_t</ref></type>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>replaces the contents with a null pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="497" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1ac31f08774b5cb89bc56367739614abcd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::TaskView::operator==</definition>
        <argsstring>(const TaskView &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
<para>compares if two taskviews are associated with the same task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="502" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="639" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1adb557ad6ea636a2276022b04062e4725" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::TaskView::operator!=</definition>
        <argsstring>(const TaskView &amp;) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
<para>compares if two taskviews are associated with different tasks </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="507" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="644" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1ac8cd58171de8ab4865e3c3f142db2db1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/twhuang/PhD/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string &amp; tf::TaskView::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>queries the name of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="512" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="599" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1aff16d269ac75cffa55a312593f20d30d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_successors</definition>
        <argsstring>() const</argsstring>
        <name>num_successors</name>
        <briefdescription>
<para>queries the number of successors of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="517" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="619" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1acc4e2bef464e8fbb5706cefdf482a24f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_dependents</definition>
        <argsstring>() const</argsstring>
        <name>num_dependents</name>
        <briefdescription>
<para>queries the number of predecessors of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="522" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="604" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1ac7bcb9cb1ee8f020de56fdbf8e651388" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_strong_dependents</definition>
        <argsstring>() const</argsstring>
        <name>num_strong_dependents</name>
        <briefdescription>
<para>queries the number of strong dependents of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="527" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="609" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1ad1ddd9a7e68a81feee1785ece99e58f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_weak_dependents</definition>
        <argsstring>() const</argsstring>
        <name>num_weak_dependents</name>
        <briefdescription>
<para>queries the number of weak dependents of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="532" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="614" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a04c63b3e737474fb4157534d8a94eb64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::TaskView::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>resets to an empty view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="537" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a29d974f0b79e5e8da9c935dfa28492d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::TaskView::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>queries if the task view is empty </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="542" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="629" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a3cb647dc0064b5d11e0c87226c47f8f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::TaskView::for_each_successor</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_successor</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies an visitor callable to each successor of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="548" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="650" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a55651e26436bfc2499cadaca4a24e48d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::TaskView::for_each_dependent</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_dependent</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies an visitor callable to each dependents of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="554" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="658" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1aa20d7b5796064c3ab194e6d7ebe2adb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetf_1a0681fa0518bdd3e3d198e1b1b744c06f" kindref="member">TaskType</ref></type>
        <definition>TaskType tf::TaskView::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>queries the task type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="559" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="634" bodyend="636"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1TaskView_1ac9778643ecfd45288cb01470df7638e4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::TaskView::TaskView</definition>
        <argsstring>(Node *)</argsstring>
        <name>TaskView</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="563" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="569" bodyend="570"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to access task information from the observer interface </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" line="463" column="1" bodyfile="/Users/twhuang/PhD/Code/taskflow/taskflow/core/task.hpp" bodystart="463" bodyend="566"/>
    <listofallmembers>
      <member refid="classtf_1_1TaskView_1a48a830129a096755e9723ed67eea5455" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>_node</name></member>
      <member refid="classtf_1_1TaskView_1a29d974f0b79e5e8da9c935dfa28492d9" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>empty</name></member>
      <member refid="classtf_1_1TaskView_1a763b2f90bc53f92d680a635fe28e858e" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>Executor</name></member>
      <member refid="classtf_1_1TaskView_1a55651e26436bfc2499cadaca4a24e48d" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>for_each_dependent</name></member>
      <member refid="classtf_1_1TaskView_1a3cb647dc0064b5d11e0c87226c47f8f8" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>for_each_successor</name></member>
      <member refid="classtf_1_1TaskView_1ac8cd58171de8ab4865e3c3f142db2db1" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>name</name></member>
      <member refid="classtf_1_1TaskView_1acc4e2bef464e8fbb5706cefdf482a24f" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_dependents</name></member>
      <member refid="classtf_1_1TaskView_1ac7bcb9cb1ee8f020de56fdbf8e651388" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_strong_dependents</name></member>
      <member refid="classtf_1_1TaskView_1aff16d269ac75cffa55a312593f20d30d" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_successors</name></member>
      <member refid="classtf_1_1TaskView_1ad1ddd9a7e68a81feee1785ece99e58f5" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_weak_dependents</name></member>
      <member refid="classtf_1_1TaskView_1adb557ad6ea636a2276022b04062e4725" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>operator!=</name></member>
      <member refid="classtf_1_1TaskView_1a6228f57867fcaeec9fd47e58be2773fd" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>operator=</name></member>
      <member refid="classtf_1_1TaskView_1a4b8af1becc79b92d0f97b8397dc4c05b" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>operator=</name></member>
      <member refid="classtf_1_1TaskView_1a148557f80bb73e600c00a4fde25ff5f7" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>operator=</name></member>
      <member refid="classtf_1_1TaskView_1ac31f08774b5cb89bc56367739614abcd" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>operator==</name></member>
      <member refid="classtf_1_1TaskView_1a04c63b3e737474fb4157534d8a94eb64" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>reset</name></member>
      <member refid="classtf_1_1TaskView_1ada6755eb9db8badbf290eb25532a8d7f" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>TaskView</name></member>
      <member refid="classtf_1_1TaskView_1adcc3095bec2afe51fffb0d2314c0e836" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>TaskView</name></member>
      <member refid="classtf_1_1TaskView_1a7c7b4378a67f39ee33724a4f96bc6abd" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>TaskView</name></member>
      <member refid="classtf_1_1TaskView_1ac9778643ecfd45288cb01470df7638e4" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>TaskView</name></member>
      <member refid="classtf_1_1TaskView_1aa20d7b5796064c3ab194e6d7ebe2adb1" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
