<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Quick Start</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="index_1ModernCppParallelTaskProgrammingLibrary">
<title>Modern C++ Parallel Task Programming</title>
<para>Taskflow helps you quickly write parallel task programs with high performance scalability and simultaneous high productivity. It is faster, more expressive, fewer lines of code, and easier for drop-in integration than many of existing task programming frameworks.</para><para><image type="html" name="performance.png" width="100%"></image>
</para><para>Taskflow is committed to support both academic and industry research projects, making it reliable and cost-efficient to develop large-scale parallel applications. Our users say:</para><para><itemizedlist>
<listitem><para>"<emphasis>Taskflow has the cleanest task API I&apos;ve ever seen.</emphasis>" <ulink url="http://coreliuminc.com">Damien Hocking @Corelium Inc</ulink> </para></listitem>
<listitem><para>"<emphasis>Taskflow has a very simple and elegant tasking interface. The performance also scales very well.</emphasis>" <ulink url="https://github.com/totalgee">Glen Fraser</ulink> </para></listitem>
<listitem><para>"<emphasis>Taskflow lets me handle parallel processing in a smart way.</emphasis>" <ulink url="https://cpp-learning.com/cpp-taskflow/">Hayabusa @Learning</ulink> </para></listitem>
<listitem><para>"<emphasis>Taskflow helps improve the throughput of our graph processing engine in just a few hours of coding.</emphasis>" <ulink url="https://ossia.io/">Jean-MichaÃ«l @KDAB</ulink> </para></listitem>
<listitem><para>"<emphasis>Best poster award for the open-source parallel programming library.</emphasis>" <ulink url="https://github.com/CppCon/CppCon2018">2018 Cpp Conference</ulink> </para></listitem>
<listitem><para>"<emphasis>Second Place in Open Source Software Competition.</emphasis>" 2019 ACM Multimedia Conference</para></listitem>
</itemizedlist>
See a quick <ulink url="https://taskflow.github.io/">presentation</ulink> and visit our <ulink url="https://github.com/taskflow/taskflow">GitHub</ulink> to learn more about Taskflow.</para></sect1>
<sect1 id="index_1StaticDynamicTasking">
<title>Static and Dynamic Tasking</title>
<para>Taskflow has a unified interface for both <emphasis>static</emphasis> tasking and <emphasis>dynamic</emphasis> tasking, allowing users to quickly master our parallel task programming model in a natural idiom.</para><para><table rows="2" cols="2"><row>
<entry thead="no"><para>Static Tasking </para></entry><entry thead="no"><para>Dynamic Tasking  </para></entry></row>
<row>
<entry thead="no"><para><image type="html" name="static_graph.svg" width="100%&lt;/td&gt;"></image>
 </para></entry><entry thead="no"><para><image type="html" name="dynamic_graph.svg" width="100%&lt;/td&gt;"></image>
  </para></entry></row>
</table>
</para></sect1>
<sect1 id="index_1ConditionalTasking">
<title>Conditional Tasking</title>
<para>Taskflow supports conditional tasking for you to implement cyclic and dynamic control flows that are otherwise difficult to do with existing task programming frameworks.</para><para><image type="html" name="condition.svg" width="100%"></image>
</para></sect1>
<sect1 id="index_1ComposableTasking">
<title>Composable Tasking</title>
<para>Taskflow is composable. You can create large parallel graphs through composition of modular and reusable blocks that are easier to optimize at an individual scope.</para><para><image type="html" name="framework.svg" width="100%"></image>
</para></sect1>
<sect1 id="index_1HeterogeneousTasking">
<title>Concurrent CPU-GPU Tasking</title>
<para>Taskflow supports heterogeneous tasking for you to accelerate a wide range of scientific computing applications by harnessing the power of CPU-GPU collaborative computing.</para><para><image type="html" name="cudaflow.svg" width="100%"></image>
</para><para>Taskflow provides visualization and tooling (<ulink url="https://github.com/taskflow/tfprof">tfprof</ulink>) needed for profiling Taskflow programs.</para><para><image type="html" name="tfprof.png" width="100%"></image>
</para></sect1>
<sect1 id="index_1HowToInstallCppTaskflow">
<title>How to Install Taskflow?</title>
<para>Taskflow is <emphasis>header-only</emphasis> and there is no need for installation. Simply download the source and copy the headers under the directory <computeroutput>taskflow/</computeroutput> to your project.</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>git<sp/>clone<sp/>https://github.com/taskflow/taskflow.git</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>cd<sp/>taskflow/</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>cp<sp/>-r<sp/>taskflow<sp/>myproject/include/</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="index_1ASimpleFirstProgram">
<title>A Simple First Program</title>
<para>Here is a rather simple program to get you started.</para><para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="taskflow_8hpp" kindref="compound">taskflow/taskflow.hpp</ref>&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Taskflow<sp/>is<sp/>header-only</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[A,<sp/>B,<sp/>C,<sp/>D]<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/PhD/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskA\n&quot;</highlight><highlight class="normal">;<sp/>},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>task<sp/>dependency<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/PhD/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskB\n&quot;</highlight><highlight class="normal">;<sp/>},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/PhD/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskC\n&quot;</highlight><highlight class="normal">;<sp/>},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/Users/twhuang/PhD/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TaskD\n&quot;</highlight><highlight class="normal">;<sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>+----&gt;|<sp/>B<sp/>|-----+<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-v-+<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(B);<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>runs<sp/>before<sp/>B<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>|<sp/>A<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>D<sp/>|<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(C);<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>runs<sp/>before<sp/>C<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-^-+<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(D);<sp/><sp/></highlight><highlight class="comment">//<sp/>B<sp/>runs<sp/>before<sp/>D<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>C.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(D);<sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>runs<sp/>before<sp/>D<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>+----&gt;|<sp/>C<sp/>|-----+<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.<ref refid="classtf_1_1Executor_1a81f35d5b0a20ac0646447eb80d97c0aa" kindref="member">run</ref>(taskflow).wait();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The program creates four tasks A, B, C, and D. The dependency constraints force A to run before B and C, and D to run after B and C. The maximum concurrency is this example is two, where B and C can run at the same time.</para><para><image type="html" name="simple.svg" width="35%"></image>
</para></sect1>
<sect1 id="index_1CompileAndRunYourFirstProgram">
<title>Compile and Run Your First Program</title>
<para>Taskflow is written in C++17 and is built on top of C++ standardized threading libraries. To compile the above program, you need to tell the compiler where to find the Taskflow header files. For example, with gcc you need the <computeroutput>-I</computeroutput> option.</para><para><programlisting filename=".sh"><codeline><highlight class="normal">~$<sp/>g++<sp/>-std=c++17<sp/>simple.cpp<sp/>-I<sp/>myproject/include/<sp/>-O2<sp/>-pthread<sp/>-o<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>./simple</highlight></codeline>
<codeline><highlight class="normal">TaskA</highlight></codeline>
<codeline><highlight class="normal">TaskC<sp/></highlight></codeline>
<codeline><highlight class="normal">TaskB<sp/></highlight></codeline>
<codeline><highlight class="normal">TaskD</highlight></codeline>
</programlisting></para><para>The execution order of B and C might differ as they can run concurrently.</para></sect1>
<sect1 id="index_1SupportedCompilers">
<title>Supported Compilers</title>
<para>To use Taskflow, you only need a compiler that supports C++17:</para><para><itemizedlist>
<listitem><para>GNU C++ Compiler at least v7.0 with -std=c++17 </para></listitem>
<listitem><para>Clang C++ Compiler at least v6.0 with -std=c++17 </para></listitem>
<listitem><para>Microsoft Visual Studio at least v15.7 (MSVC++ 19.14) </para></listitem>
<listitem><para>AppleClang Xode Version at least v8 </para></listitem>
<listitem><para>Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17</para></listitem>
</itemizedlist>
Taskflow works on Linux, Windows, and Mac OS X.</para></sect1>
<sect1 id="index_1License">
<title>License</title>
<para>Taskflow is open-source under permissive MIT license. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
